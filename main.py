'''Desenvolvido por Giovanni Galarda Strasser
ENUNCIADO
Para obter os pontos relativos a este trabalho, voc√™ dever√° criar um programa, utilizando a
linguagem Python, C, ou C++. Este programa, quando executado, ir√° apresentar os resultados de
opera√ß√µes que ser√£o realizadas entre dois conjuntos de dados.
O programa que voc√™ desenvolver√° ir√° receber como entrada um arquivo de texto (.txt)
contendo v√°rios conjuntos de dados e v√°rias opera√ß√µes. Estas opera√ß√µes e dados estar√£o representadas
em um arquivo de textos contendo apenas os dados referentes as opera√ß√µes que devem ser realizadas
segundo a seguinte regra fixa: a primeira linha do arquivo de texto de entrada conter√° o n√∫mero de
opera√ß√µes que est√£o descritas no arquivo, este n√∫mero de opera√ß√µes ser√° um inteiro; as linhas
seguintes seguir√£o sempre o mesmo padr√£o de tr√™s linhas: a primeira linha apresenta o c√≥digo da
opera√ß√£o (U para uni√£o, I para interse√ß√£o, D para diferen√ßa e C produto cartesiano), a segunda e
terceira linhas conter√£o os elementos dos conjuntos separados por virgulas. A seguir est√° um exemplo
das linhas que podem existir em um arquivo de testes para o programa que voc√™ ir√° desenvolver:
4
U
3, 5, 67, 7
1, 2, 3, 4
I
1, 2, 3, 4, 5
4, 5
D
1, A, C, 34
A, C, D, 23
C
3, 4, 5, 5, A, B, R
1, B, C, D, 1
Neste exemplo temos 4 opera√ß√µes uma uni√£o (U), uma interse√ß√£o (I), um diferen√ßa (D) e um
produto cartesiano (C). A uni√£o, definida por U, dever√° ser executada sobre os conjuntos {ùüë, ùüì, ùüîùüï, ùüï} e
{ùüè, ùüê, ùüë, ùüí}, cujos elementos est√£o explicitados nas linhas posteriores a defini√ß√£o da oper√ß√£o (U).
A resposta do seu programa dever√° conter a opera√ß√£o realizada, descrita por extenso, os dados
dos conjuntos identificados, e o resultado da opera√ß√£o. No caso da uni√£o a linha de sa√≠da dever√° conter
a informa√ß√£o e a formata√ß√£o mostrada a seguir:
Uni√£o: conjunto 1 {3, 5, 67, 7}, conjunto 2 {1, 2, 3, 4}. Resultado: {3, 5, 67, 7, 1, 2, 4}
Seu programa dever√° mostrar a sa√≠da no terminal, ou em um arquivo de textos. Em qualquer
um dos casos, a sa√≠da ser√° composta por uma linha de sa√≠da para cada opera√ß√£o constante no arquivo
de textos de entrada formatada segundo o exemplo de sa√≠da acima. Observe as letras mai√∫sculas e
min√∫sculas, e os pontos utilizados na formata√ß√£o da linha de sa√≠da apresenta acima.
No caso do texto de exemplo, teremos 4 linhas, e apenas 4 linhas de sa√≠da, formatadas e
pontuadas conforme o exemplo de sa√≠da acima. O uso de linhas extras na sa√≠da, ou erros de formata√ß√£o,
implicam em perda de pontos como pode ser visto na rubrica de avalia√ß√£o constante neste documento.
Para que seu programa possa ser testado voc√™ deve criar, no m√≠nimo, tr√™s arquivos de entrada
contendo um n√∫mero diferente de opera√ß√µes, opera√ß√µes com dados diferentes, e opera√ß√µes em ordem 
diferentes. Os arquivos de entrada criados para os seus testes devem estar dispon√≠veis tanto no
ambiente repl.it quanto no ambiente Github.
Observe que o professor ir√° testar seu programa com os arquivos de testes que voc√™ criar e com,
no m√≠nimo um arquivo de testes criado pelo pr√≥prio professor.'''

import os

#Functions
def line_to_array(line):
    values = []
    values = line.split(",")
    for i in range(len(values)):
        values[i] = values[i].strip()
    return values

#Union
def U(g1, g2):
    temp = g1.copy()
    for i in range(len(g2)):
        if g2[i] not in temp:
            temp.append(g2[i])
    return temp
    #return list(set(g1) | set(g2)) Wrong sorting!
    
#Intersection
def I(g1, g2):
    return list(set(g1) & set(g2))

#Difference
def D(g1,g2):
    temp = g1.copy()
    size = len(g2)
    for i in range(size):
        if g2[i] in temp:
            temp.remove(g2[i])
    return temp

#Cartesian
def C(g1,g2):
    temp = []
    for i in range(len(g1)):
        for j in range(len(g2)):
            element = "(" + g1[i] + "," + g2[j] + ")"
            temp.append(element)
    return temp
    
    
def print_group(g, header):
    print(header, end=" ")
    print("{", end="")
    #print(g)
    for i in range(len(g)):
        if i > 0:
            print(" ", end="")
        print(g[i], end="")
        if i < len(g) - 1:
            print(",", end="")
    print("}", end="")

filedir = "demofile.txt"
valid = False

while not valid:
    print("Bem-vindo! Por favor entre o nome do arquivo que cont√©m as opera√ß√µes a serem realizadas! (sem incluir a extens√£o .txt)")
    print("P.S Um campo vazio carregar√° o arquivo \'demofile.txt\'")
    temp_input = str(input(">")).replace(" ","")
    if temp_input == "": #Check for Empty
            if os.path.isfile(filedir):
                valid = True
                break
            else:
                print("! Parece que o arquivo de leitura padr√£o \'" + "demofile.txt" + "\' foi removido.")
                print("! Por favor refira-se ao Readme para mais informa√ß√µes.")
    temp_input += ".txt"
    if os.path.isfile(temp_input):
        filedir = temp_input
        valid = True
    else:
        print("Error! N√£o foi poss√≠vel encontrar o arquivo \'" + temp_input + "\'!")


f = open(filedir, "r")


print("Mostrando resultados para o arquivo \"" + filedir + "\"...")
#Treat lines
lines = []
lines = f.read().split("\n")

to_execute = int(lines.pop(0).strip())

remove_list = ['\n', ' ']
for l in range(len(lines)):
    lines[l] = lines[l].strip(' ')
    


#Logic Variables
i = 0
result_count = 0

#Operation Variables
operator = ""
group1 = []
group2 = []

while(i < len(lines) and result_count < to_execute):
    if operator == ""  and operator.capitalize() in "UIDC":
        operator = lines[i].capitalize()
    else:
        if len(group1) == 0:
            group1 = line_to_array(lines[i])
        else:
            group2 = line_to_array(lines[i])
            
        
    #Print
    if operator != "" and len(group1) > 0 and len(group2) > 0:
        
        operation = ""
        result = ['INVALID']
        
        match operator:
            case "U":
                operation = "Uni√£o"
                result = U(group1, group2)
            case "I":
                operation = "Interse√ß√£o"
                result = I(group1, group2)
            case "D":
                operation = "Diferen√ßa"
                result = D(group1, group2)
            case "C":
                operation = "Produto Cartesiano"
                result = C(group1, group2)
        
        #Print Results
        print(operation, end=": ")
        print_group(group1, "conjunto 1")
        print(", ", end="")
        print_group(group2, "conjunto 2")
        print_group(result, ". Resultado:")
        result_count += 1
        print() #Line Break
        
        #Do functions call here
        
        operator = ""
        group1 = []
        group2 = []
    i += 1